#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HR
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HR")]
	public partial class DatabaseHRDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertGenders(Genders instance);
    partial void UpdateGenders(Genders instance);
    partial void DeleteGenders(Genders instance);
    partial void InsertPositions(Positions instance);
    partial void UpdatePositions(Positions instance);
    partial void DeletePositions(Positions instance);
    partial void InsertStatuses(Statuses instance);
    partial void UpdateStatuses(Statuses instance);
    partial void DeleteStatuses(Statuses instance);
    partial void InsertTypeContracts(TypeContracts instance);
    partial void UpdateTypeContracts(TypeContracts instance);
    partial void DeleteTypeContracts(TypeContracts instance);
    partial void Insertlogintb(logintb instance);
    partial void Updatelogintb(logintb instance);
    partial void Deletelogintb(logintb instance);
    #endregion
		
		public DatabaseHRDataContext() : 
				base(global::HR.Properties.Settings.Default.HRConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseHRDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseHRDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseHRDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseHRDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Worker> Workers
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contract
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<Genders> Genders
		{
			get
			{
				return this.GetTable<Genders>();
			}
		}
		
		public System.Data.Linq.Table<Positions> Positions
		{
			get
			{
				return this.GetTable<Positions>();
			}
		}
		
		public System.Data.Linq.Table<Statuses> Statuses
		{
			get
			{
				return this.GetTable<Statuses>();
			}
		}
		
		public System.Data.Linq.Table<TypeContracts> TypeContracts
		{
			get
			{
				return this.GetTable<TypeContracts>();
			}
		}
		
		public System.Data.Linq.Table<logintb> logintbs
		{
			get
			{
				return this.GetTable<logintb>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workers")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Imie;
		
		private string _Nazwisko;
		
		private int _Płeć;
		
		private System.DateTime _Data_urodzenia;
		
		private string _PESEL;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<Contract> _Contract;
		
		private EntityRef<Genders> _Genders;
		
		private EntityRef<Statuses> _Statuses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnIdSexChanging(int value);
    partial void OnIdSexChanged();
    partial void OndtBirthChanging(System.DateTime value);
    partial void OndtBirthChanged();
    partial void OnPeselChanging(string value);
    partial void OnPeselChanged();
    partial void OnIdStatusChanging(System.Nullable<int> value);
    partial void OnIdStatusChanged();
    #endregion
		
		public Worker()
		{
			this._Contract = new EntitySet<Contract>(new Action<Contract>(this.attach_Contract), new Action<Contract>(this.detach_Contract));
			this._Genders = default(EntityRef<Genders>);
			this._Statuses = default(EntityRef<Statuses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Imie", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Imie;
			}
			set
			{
				if ((this._Imie != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Imie = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nazwisko", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Nazwisko;
			}
			set
			{
				if ((this._Nazwisko != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Nazwisko = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Płeć", DbType="Int NOT NULL")]
		public int IdSex
		{
			get
			{
				return this._Płeć;
			}
			set
			{
				if ((this._Płeć != value))
				{
					if (this._Genders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSexChanging(value);
					this.SendPropertyChanging();
					this._Płeć = value;
					this.SendPropertyChanged("IdSex");
					this.OnIdSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_urodzenia", DbType="Date NOT NULL")]
		public System.DateTime dtBirth
		{
			get
			{
				return this._Data_urodzenia;
			}
			set
			{
				if ((this._Data_urodzenia != value))
				{
					this.OndtBirthChanging(value);
					this.SendPropertyChanging();
					this._Data_urodzenia = value;
					this.SendPropertyChanged("dtBirth");
					this.OndtBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Pesel
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPeselChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("Pesel");
					this.OnPeselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public System.Nullable<int> IdStatus
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._Statuses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("IdStatus");
					this.OnIdStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Contract", Storage="_Contract", ThisKey="Id", OtherKey="IdWorker")]
		public EntitySet<Contract> Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				this._Contract.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genders_Worker", Storage="_Genders", ThisKey="IdSex", OtherKey="Id", IsForeignKey=true)]
		public Genders Genders
		{
			get
			{
				return this._Genders.Entity;
			}
			set
			{
				Genders previousValue = this._Genders.Entity;
				if (((previousValue != value) 
							|| (this._Genders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genders.Entity = null;
						previousValue.Worker.Remove(this);
					}
					this._Genders.Entity = value;
					if ((value != null))
					{
						value.Worker.Add(this);
						this._Płeć = value.Id;
					}
					else
					{
						this._Płeć = default(int);
					}
					this.SendPropertyChanged("Genders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statuses_Worker", Storage="_Statuses", ThisKey="IdStatus", OtherKey="Id", IsForeignKey=true)]
		public Statuses Statuses
		{
			get
			{
				return this._Statuses.Entity;
			}
			set
			{
				Statuses previousValue = this._Statuses.Entity;
				if (((previousValue != value) 
							|| (this._Statuses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Statuses.Entity = null;
						previousValue.Worker.Remove(this);
					}
					this._Statuses.Entity = value;
					if ((value != null))
					{
						value.Worker.Add(this);
						this._Status = value.Id;
					}
					else
					{
						this._Status = default(Nullable<int>);
					}
					this.SendPropertyChanged("Statuses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Rodzaj_umowy;
		
		private System.DateTime _Data_zawarcia;
		
		private System.DateTime _Okres_umowy;
		
		private int _Stanowisko;
		
		private decimal _Kwota_bazowa;
		
		private int _IdPracownik;
		
		private EntityRef<Positions> _Positions;
		
		private EntityRef<TypeContracts> _TypeContracts;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdContractTypeChanging(int value);
    partial void OnIdContractTypeChanged();
    partial void OndtStartContractChanging(System.DateTime value);
    partial void OndtStartContractChanged();
    partial void OndtEndContractChanging(System.DateTime value);
    partial void OndtEndContractChanged();
    partial void OnIdPositionChanging(int value);
    partial void OnIdPositionChanged();
    partial void OnSalaryChanging(decimal value);
    partial void OnSalaryChanged();
    partial void OnIdWorkerChanging(int value);
    partial void OnIdWorkerChanged();
    #endregion
		
		public Contract()
		{
			this._Positions = default(EntityRef<Positions>);
			this._TypeContracts = default(EntityRef<TypeContracts>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rodzaj_umowy", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL")]
		public int IdContractType
		{
			get
			{
				return this._Rodzaj_umowy;
			}
			set
			{
				if ((this._Rodzaj_umowy != value))
				{
					if (this._TypeContracts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdContractTypeChanging(value);
					this.SendPropertyChanging();
					this._Rodzaj_umowy = value;
					this.SendPropertyChanged("IdContractType");
					this.OnIdContractTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_zawarcia", DbType="Date NOT NULL")]
		public System.DateTime dtStartContract
		{
			get
			{
				return this._Data_zawarcia;
			}
			set
			{
				if ((this._Data_zawarcia != value))
				{
					this.OndtStartContractChanging(value);
					this.SendPropertyChanging();
					this._Data_zawarcia = value;
					this.SendPropertyChanged("dtStartContract");
					this.OndtStartContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Okres_umowy", DbType="Date NOT NULL")]
		public System.DateTime dtEndContract
		{
			get
			{
				return this._Okres_umowy;
			}
			set
			{
				if ((this._Okres_umowy != value))
				{
					this.OndtEndContractChanging(value);
					this.SendPropertyChanging();
					this._Okres_umowy = value;
					this.SendPropertyChanged("dtEndContract");
					this.OndtEndContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stanowisko", DbType="Int NOT NULL")]
		public int IdPosition
		{
			get
			{
				return this._Stanowisko;
			}
			set
			{
				if ((this._Stanowisko != value))
				{
					if (this._Positions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPositionChanging(value);
					this.SendPropertyChanging();
					this._Stanowisko = value;
					this.SendPropertyChanged("IdPosition");
					this.OnIdPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kwota_bazowa", DbType="Decimal(18,0) NOT NULL")]
		public decimal Salary
		{
			get
			{
				return this._Kwota_bazowa;
			}
			set
			{
				if ((this._Kwota_bazowa != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Kwota_bazowa = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPracownik", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL")]
		public int IdWorker
		{
			get
			{
				return this._IdPracownik;
			}
			set
			{
				if ((this._IdPracownik != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWorkerChanging(value);
					this.SendPropertyChanging();
					this._IdPracownik = value;
					this.SendPropertyChanged("IdWorker");
					this.OnIdWorkerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Positions_Contract", Storage="_Positions", ThisKey="IdPosition", OtherKey="Id", IsForeignKey=true)]
		public Positions Positions
		{
			get
			{
				return this._Positions.Entity;
			}
			set
			{
				Positions previousValue = this._Positions.Entity;
				if (((previousValue != value) 
							|| (this._Positions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Positions.Entity = null;
						previousValue.Contract.Remove(this);
					}
					this._Positions.Entity = value;
					if ((value != null))
					{
						value.Contract.Add(this);
						this._Stanowisko = value.Id;
					}
					else
					{
						this._Stanowisko = default(int);
					}
					this.SendPropertyChanged("Positions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeContracts_Contract", Storage="_TypeContracts", ThisKey="IdContractType", OtherKey="Id", IsForeignKey=true)]
		public TypeContracts TypeContracts
		{
			get
			{
				return this._TypeContracts.Entity;
			}
			set
			{
				TypeContracts previousValue = this._TypeContracts.Entity;
				if (((previousValue != value) 
							|| (this._TypeContracts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeContracts.Entity = null;
						previousValue.Contract.Remove(this);
					}
					this._TypeContracts.Entity = value;
					if ((value != null))
					{
						value.Contract.Add(this);
						this._Rodzaj_umowy = value.Id;
					}
					else
					{
						this._Rodzaj_umowy = default(int);
					}
					this.SendPropertyChanged("TypeContracts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Contract", Storage="_Worker", ThisKey="IdWorker", OtherKey="Id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Contract.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Contract.Add(this);
						this._IdPracownik = value.Id;
					}
					else
					{
						this._IdPracownik = default(int);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Genders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Płeć;
		
		private EntitySet<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    #endregion
		
		public Genders()
		{
			this._Worker = new EntitySet<Worker>(new Action<Worker>(this.attach_Worker), new Action<Worker>(this.detach_Worker));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Płeć", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Płeć;
			}
			set
			{
				if ((this._Płeć != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Płeć = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genders_Worker", Storage="_Worker", ThisKey="Id", OtherKey="IdSex")]
		public EntitySet<Worker> Worker
		{
			get
			{
				return this._Worker;
			}
			set
			{
				this._Worker.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Genders = this;
		}
		
		private void detach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Genders = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Positions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Stanowisko;
		
		private EntitySet<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWorkerPositionChanging(string value);
    partial void OnWorkerPositionChanged();
    #endregion
		
		public Positions()
		{
			this._Contract = new EntitySet<Contract>(new Action<Contract>(this.attach_Contract), new Action<Contract>(this.detach_Contract));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stanowisko", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string WorkerPosition
		{
			get
			{
				return this._Stanowisko;
			}
			set
			{
				if ((this._Stanowisko != value))
				{
					this.OnWorkerPositionChanging(value);
					this.SendPropertyChanging();
					this._Stanowisko = value;
					this.SendPropertyChanged("WorkerPosition");
					this.OnWorkerPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Positions_Contract", Storage="_Contract", ThisKey="Id", OtherKey="IdPosition")]
		public EntitySet<Contract> Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				this._Contract.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Positions = this;
		}
		
		private void detach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Positions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Statuses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Status;
		
		private EntitySet<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Statuses()
		{
			this._Worker = new EntitySet<Worker>(new Action<Worker>(this.attach_Worker), new Action<Worker>(this.detach_Worker));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Statuses_Worker", Storage="_Worker", ThisKey="Id", OtherKey="IdStatus")]
		public EntitySet<Worker> Worker
		{
			get
			{
				return this._Worker;
			}
			set
			{
				this._Worker.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Statuses = this;
		}
		
		private void detach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Statuses = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class TypeContracts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Typ;
		
		private EntitySet<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntypeContractChanging(string value);
    partial void OntypeContractChanged();
    #endregion
		
		public TypeContracts()
		{
			this._Contract = new EntitySet<Contract>(new Action<Contract>(this.attach_Contract), new Action<Contract>(this.detach_Contract));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Typ", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string typeContract
		{
			get
			{
				return this._Typ;
			}
			set
			{
				if ((this._Typ != value))
				{
					this.OntypeContractChanging(value);
					this.SendPropertyChanging();
					this._Typ = value;
					this.SendPropertyChanged("typeContract");
					this.OntypeContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeContracts_Contract", Storage="_Contract", ThisKey="Id", OtherKey="IdContractType")]
		public EntitySet<Contract> Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				this._Contract.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.TypeContracts = this;
		}
		
		private void detach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.TypeContracts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.logintb")]
	public partial class logintb : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private string _passw;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswChanging(string value);
    partial void OnpasswChanged();
    #endregion
		
		public logintb()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passw", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string passw
		{
			get
			{
				return this._passw;
			}
			set
			{
				if ((this._passw != value))
				{
					this.OnpasswChanging(value);
					this.SendPropertyChanging();
					this._passw = value;
					this.SendPropertyChanged("passw");
					this.OnpasswChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
